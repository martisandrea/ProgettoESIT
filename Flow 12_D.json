[
    {
        "id": "24c3f65a1d97bee2",
        "type": "tab",
        "label": "Flow 12_D",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8b162d37896be4bf",
        "type": "mqtt in",
        "z": "24c3f65a1d97bee2",
        "name": "Temprerature Sensor",
        "topic": "sensor/temperature",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "18fb995bc3670ded",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 220,
        "wires": [
            [
                "d8c7b283175622ea"
            ]
        ]
    },
    {
        "id": "4222dc752f9f6d30",
        "type": "mqtt in",
        "z": "24c3f65a1d97bee2",
        "name": "Humidity Sensor",
        "topic": "sensor/humidity",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "18fb995bc3670ded",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 300,
        "wires": [
            [
                "67d06fe91de498de"
            ]
        ]
    },
    {
        "id": "fa679f3a3367dcd1",
        "type": "mqtt in",
        "z": "24c3f65a1d97bee2",
        "name": "Light Sensor",
        "topic": "sensor/light",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "18fb995bc3670ded",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "54a3d3bcb02493b0"
            ]
        ]
    },
    {
        "id": "548eb218785dd73b",
        "type": "ui_gauge",
        "z": "24c3f65a1d97bee2",
        "name": "",
        "group": "84043371bed7b76e",
        "order": 5,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": "Â°C",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1030,
        "y": 200,
        "wires": []
    },
    {
        "id": "e18360b8fad9e825",
        "type": "ui_gauge",
        "z": "24c3f65a1d97bee2",
        "name": "",
        "group": "84043371bed7b76e",
        "order": 6,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1020,
        "y": 300,
        "wires": []
    },
    {
        "id": "bf66eeaeadc815ed",
        "type": "ui_gauge",
        "z": "24c3f65a1d97bee2",
        "name": "",
        "group": "84043371bed7b76e",
        "order": 7,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Light",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1010,
        "y": 380,
        "wires": []
    },
    {
        "id": "c35493361eb1e90e",
        "type": "function",
        "z": "24c3f65a1d97bee2",
        "name": "Average function",
        "func": "const numSemples = 5;\n\nconst sum = context.samples.reduce((acc, val) => acc + val, 0);\nmsg.payload = sum / context.samples.length;\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 220,
        "wires": [
            [
                "548eb218785dd73b"
            ],
            [
                "f934f51a97c99918"
            ]
        ]
    },
    {
        "id": "ea0de495d500c483",
        "type": "function",
        "z": "24c3f65a1d97bee2",
        "name": "Average function",
        "func": "const numSemples = 5;\n\nconst sum = context.samples.reduce((acc, val) => acc + val, 0);\nmsg.payload = sum / context.samples.length;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "e18360b8fad9e825"
            ]
        ]
    },
    {
        "id": "fb1e92262cc6fd63",
        "type": "function",
        "z": "24c3f65a1d97bee2",
        "name": "Average function",
        "func": "const numSemples = 5;\n\nconst sum = context.samples.reduce((acc, val) => acc + val, 0);\nmsg.payload = sum / context.samples.length;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 380,
        "wires": [
            [
                "bf66eeaeadc815ed"
            ]
        ]
    },
    {
        "id": "f934f51a97c99918",
        "type": "debug",
        "z": "24c3f65a1d97bee2",
        "name": "Temperature Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 240,
        "wires": []
    },
    {
        "id": "d8c7b283175622ea",
        "type": "function",
        "z": "24c3f65a1d97bee2",
        "name": "Outlier Removal function",
        "func": "const threshold = 10; // Threshold to determine abnormal spikes\nconst minValue = 1; // Minimum acceptable value (prevents zero or negative values)\nconst numSamples = 5; // Number of samples to calculate the average\n// Initialize context memory to store samples\ncontext.samples = context.samples || [];\n// Discard the current value if it is zero or below the minimum acceptable value\nif (msg.payload < minValue) {\n return null; // Ignore this message\n}\n// Calculate the average of the current samples\nconst sum = context.samples.reduce((acc, val) => acc + val, 0);\nconst average = context.samples.length > 0 ? sum / context.samples.length : msg.payload;\n// Discard the current value if it deviates from the average by more than the threshold\nif (Math.abs(msg.payload - average) > threshold) {\n return null; // Ignore this message\n}\n// Add the current value to the samples\ncontext.samples.push(msg.payload);\n// Keep only the latest numSamples samples\nif (context.samples.length > numSamples) {\n context.samples.shift(); // Remove the oldest sample\n}\n// Return the value if it is acceptable\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 220,
        "wires": [
            [
                "c35493361eb1e90e"
            ]
        ]
    },
    {
        "id": "67d06fe91de498de",
        "type": "function",
        "z": "24c3f65a1d97bee2",
        "name": "Outlier Removal function",
        "func": "const threshold = 10; // Threshold to determine abnormal spikes\nconst minValue = 1; // Minimum acceptable value (prevents zero or negative values)\nconst numSamples = 5; // Number of samples to calculate the average\n// Initialize context memory to store samples\ncontext.samples = context.samples || [];\n// Discard the current value if it is zero or below the minimum acceptable value\nif (msg.payload < minValue) {\n return null; // Ignore this message\n}\n// Calculate the average of the current samples\nconst sum = context.samples.reduce((acc, val) => acc + val, 0);\nconst average = context.samples.length > 0 ? sum / context.samples.length : msg.payload;\n// Discard the current value if it deviates from the average by more than the threshold\nif (Math.abs(msg.payload - average) > threshold) {\n return null; // Ignore this message\n}\n// Add the current value to the samples\ncontext.samples.push(msg.payload);\n// Keep only the latest numSamples samples\nif (context.samples.length > numSamples) {\n context.samples.shift(); // Remove the oldest sample\n}\n// Return the value if it is acceptable\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 300,
        "wires": [
            [
                "ea0de495d500c483"
            ]
        ]
    },
    {
        "id": "54a3d3bcb02493b0",
        "type": "function",
        "z": "24c3f65a1d97bee2",
        "name": "Outlier Removal function",
        "func": "const threshold = 10; // Threshold to determine abnormal spikes\nconst minValue = 1; // Minimum acceptable value (prevents zero or negative values)\nconst numSamples = 5; // Number of samples to calculate the average\n// Initialize context memory to store samples\ncontext.samples = context.samples || [];\n// Discard the current value if it is zero or below the minimum acceptable value\nif (msg.payload < minValue) {\n return null; // Ignore this message\n}\n// Calculate the average of the current samples\nconst sum = context.samples.reduce((acc, val) => acc + val, 0);\nconst average = context.samples.length > 0 ? sum / context.samples.length : msg.payload;\n// Discard the current value if it deviates from the average by more than the threshold\nif (Math.abs(msg.payload - average) > threshold) {\n return null; // Ignore this message\n}\n// Add the current value to the samples\ncontext.samples.push(msg.payload);\n// Keep only the latest numSamples samples\nif (context.samples.length > numSamples) {\n context.samples.shift(); // Remove the oldest sample\n}\n// Return the value if it is acceptable\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            [
                "fb1e92262cc6fd63"
            ]
        ]
    },
    {
        "id": "18fb995bc3670ded",
        "type": "mqtt-broker",
        "name": "",
        "broker": "broker.mqtt-dashboard.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "84043371bed7b76e",
        "type": "ui_group",
        "name": "Sensor Data",
        "tab": "d8eb9429aed0f75e",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d8eb9429aed0f75e",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]